countyNames <- sapply(counties_sp@polygons, function(x) x@ID)
my_data= countyNames[indices]
my_data=sub("california,", "", my_data)
mdf=cdf
mdf$county_name=toTitleCase(my_data)
mdf <- na.omit(mdf)
mdf$county_name= as.factor(mdf$county_name)
mdf<- one_hot(as.data.table(mdf))
counties <- maps::map('county', fill=TRUE, col="transparent", plot=FALSE)
IDs <- sapply(strsplit(counties$names, ":"), function(x) x[1])
counties_sp <- map2SpatialPolygons(counties, IDs=IDs,
proj4string=CRS("+proj=longlat +datum=WGS84"))
# Convert pointsDF to a SpatialPoints object
pointsSP <- SpatialPoints(latlong_df,
proj4string=CRS("+proj=longlat +datum=WGS84"))
# Use 'over' to get _indices_ of the Polygons object containing each point
indices <- over(pointsSP, counties_sp)
# Return the county names of the Polygons object containing each point
countyNames <- sapply(counties_sp@polygons, function(x) x@ID)
my_data= countyNames[indices]
my_data=sub("california,", "", my_data)
mdf=cdf
mdf$county_name=toTitleCase(my_data)
mdf$county_name= as.factor(mdf$county_name)
mdf<- one_hot(as.data.table(mdf))
counties <- maps::map('county', fill=TRUE, col="transparent", plot=FALSE)
IDs <- sapply(strsplit(counties$names, ":"), function(x) x[1])
counties_sp <- map2SpatialPolygons(counties, IDs=IDs,
proj4string=CRS("+proj=longlat +datum=WGS84"))
# Convert pointsDF to a SpatialPoints object
pointsSP <- SpatialPoints(latlong_df,
proj4string=CRS("+proj=longlat +datum=WGS84"))
# Use 'over' to get _indices_ of the Polygons object containing each point
indices <- over(pointsSP, counties_sp)
# Return the county names of the Polygons object containing each point
countyNames <- sapply(counties_sp@polygons, function(x) x@ID)
my_data= countyNames[indices]
my_data=sub("california,", "", my_data)
mdf=cdf
mdf$county_name=toTitleCase(my_data)
#mdf$county_name= as.factor(mdf$county_name)
#mdf<- one_hot(as.data.table(mdf))
str(mdf)
my_data
latlong_df <- df[,c(1,2)]
str(latlong_df)
counties <- maps::map('county', fill=TRUE, col="transparent", plot=FALSE)
IDs <- sapply(strsplit(counties$names, ":"), function(x) x[1])
counties_sp <- map2SpatialPolygons(counties, IDs=IDs,
proj4string=CRS("+proj=longlat +datum=WGS84"))
# Convert pointsDF to a SpatialPoints object
pointsSP <- SpatialPoints(latlong_df,
proj4string=CRS("+proj=longlat +datum=WGS84"))
# Use 'over' to get _indices_ of the Polygons object containing each point
indices <- over(pointsSP, counties_sp)
# Return the county names of the Polygons object containing each point
countyNames <- sapply(counties_sp@polygons, function(x) x@ID)
my_data= countyNames[indices]
my_data=sub("california,", "", my_data)
mdf=df
mdf$county_name=toTitleCase(my_data)
mdf <- na.omit(mdf)
str(df)
str(mdf)
latlong_df <- cdf[,c(1,2)]
str(latlong_df)
#LEEMOS EL DATASET
df <- read.csv('housing.csv')
cdf=df #clean_data_frame
#cdf_lon_lat=df #clean_data_frame
#QUITAMOS LOS NAN's
cdf <- na.omit(cdf)
#QUITAMOS 'ISLANDS'
cdf<-cdf[,-12]
#QUITMOS LONGITUD Y LATITUD
#cdf <- cdf[,-1:-2]
#REMOVEMOS ALGUNOS OUTLAYERS
cdf<-cdf[cdf$median_house_value <500000, ]
cdf<-cdf[cdf$median_income <15, ]
cdf<-cdf[cdf$housing_median_age <49, ]
# QUITAMOS LOS OUTLAYERS
#cdf<- cdf[-which(cdf$total_rooms%in% out_total_rooms),]
#cdf<- cdf[-which(cdf$total_bedrooms%in% out_total_bedrooms),]
#cdf<- cdf[-which(cdf$population%in% out_population),]
#cdf<- cdf[-which(cdf$households%in% out_households),]
#cdf<- cdf[-which(cdf$median_income%in% out_median_income),]
#cdf<- cdf[-which(cdf$median_house_value%in% out_median_value),]
str(cdf)
cdf$rooms_per_household <- cdf$total_rooms/ cdf$households
cdf$bedrooms_per_room= cdf$total_bedrooms/ cdf$total_rooms
cdf$population_per_household=cdf$population/ cdf$households
cdf$log_total_rooms=log(cdf$total_rooms)
cdf$log_total_bedrooms=log(cdf$total_bedrooms)
cdf$log_population=log(cdf$population)
cdf$log_households=log(cdf$households)
cdf$log_median_income=log(cdf$median_income)
cdf$log_median_house_value=log(cdf$median_house_value)
cdf$log_rooms_per_household <- cdf$log_total_rooms/ cdf$log_households
cdf$log_bedrooms_per_room= cdf$log_total_bedrooms/ cdf$log_total_rooms
cdf$log_population_per_household=cdf$log_population/ cdf$log_households
cdf2=cdf
cdf2$median_house_value=NULL
cdf$log_median_house_value=NULL
str(cdf)
sdf=df #clean_data_frame
summary(sdf)
sdf=df #clean_data_frame
summary(sdf)
library(scales)
#QUITAMOS LOS NAN's
sdf$ocean_proximity = as.factor(sdf$ocean_proximity)
sdf<- one_hot(as.data.table(sdf))
#colnames(df)[10]  <- "ocean_proximity_1H_OCEAN"
#colnames(df)[13]  <- "ocean_proximity_NEAR_BAY"
#colnames(df)[14]  <- "ocean_proximity_NEAR_OCEAN"
sdf <- na.omit(sdf)
#QUITAMOS 'ISLANDS'
sdf<-sdf[,-12]
#QUITMOS LONGITUD Y LATITUD
sdf <- sdf[,-1:-2]
#REMOVEMOS ALGUNOS OUTLAYERS
sdf<-sdf[sdf$median_house_value <500000, ]
sdf<-sdf[sdf$median_income <15, ]
sdf<-sdf[sdf$housing_median_age <49, ]
sdf$rooms_per_household <- sdf$total_rooms/ sdf$households
sdf$bedrooms_per_room= sdf$total_bedrooms/ sdf$total_rooms
sdf$population_per_household=sdf$population/ sdf$households
sdf$median_house_value=rescale(sdf$median_house_value,to=c(1,15))
sdf$housing_median_age=rescale(sdf$housing_median_age,to=c(1,15))
sdf$total_rooms=rescale(sdf$total_rooms,to=c(1,15))
sdf$total_bedrooms=rescale(sdf$total_bedrooms,to=c(1,15))
sdf$population=rescale(sdf$population,to=c(1,15))
sdf$households=rescale(sdf$households,to=c(1,15))
sdf$rooms_per_household=rescale(sdf$rooms_per_household,to=c(1,15))
sdf$bedrooms_per_room=rescale(sdf$bedrooms_per_room,to=c(1,15))
sdf$population_per_household=rescale(sdf$population_per_household,to=c(1,15))
sdf$log_total_rooms=log(sdf$total_rooms)
sdf$log_total_bedrooms=log(sdf$total_bedrooms)
sdf$log_population=log(sdf$population)
sdf$log_households=log(sdf$households)
sdf$log_median_income=log(sdf$median_income)
sdf$log_median_house_value=
sdf$log_rooms_per_household <- log(sdf$rooms_per_household)
sdf$log_bedrooms_per_room= log(sdf$bedrooms_per_room)
sdf$log_population_per_household=log(sdf$population_per_household)
sdf2=sdf
sdf2$median_house_value=NULL
sdf$log_median_house_value=NULL
summary(sdf)
sdf=df #clean_data_frame
summary(sdf)
library(scales)
#QUITAMOS LOS NAN's
sdf$ocean_proximity = as.factor(sdf$ocean_proximity)
sdf<- one_hot(as.data.table(sdf))
colnames(df)[10]  <- "ocean_proximity_1H_OCEAN"
colnames(df)[13]  <- "ocean_proximity_NEAR_BAY"
sdf=df #clean_data_frame
summary(sdf)
library(scales)
#QUITAMOS LOS NAN's
sdf$ocean_proximity = as.factor(sdf$ocean_proximity)
sdf<- one_hot(as.data.table(sdf))
colnames(sdf)[10]  <- "ocean_proximity_1H_OCEAN"
colnames(sdf)[13]  <- "ocean_proximity_NEAR_BAY"
colnames(sdf)[14]  <- "ocean_proximity_NEAR_OCEAN"
sdf <- na.omit(sdf)
#QUITAMOS 'ISLANDS'
sdf<-sdf[,-12]
#QUITMOS LONGITUD Y LATITUD
sdf <- sdf[,-1:-2]
#REMOVEMOS ALGUNOS OUTLAYERS
sdf<-sdf[sdf$median_house_value <500000, ]
sdf<-sdf[sdf$median_income <15, ]
sdf<-sdf[sdf$housing_median_age <49, ]
sdf$rooms_per_household <- sdf$total_rooms/ sdf$households
sdf$bedrooms_per_room= sdf$total_bedrooms/ sdf$total_rooms
sdf$population_per_household=sdf$population/ sdf$households
sdf$median_house_value=rescale(sdf$median_house_value,to=c(1,15))
sdf$housing_median_age=rescale(sdf$housing_median_age,to=c(1,15))
sdf$total_rooms=rescale(sdf$total_rooms,to=c(1,15))
sdf$total_bedrooms=rescale(sdf$total_bedrooms,to=c(1,15))
sdf$population=rescale(sdf$population,to=c(1,15))
sdf$households=rescale(sdf$households,to=c(1,15))
sdf$rooms_per_household=rescale(sdf$rooms_per_household,to=c(1,15))
sdf$bedrooms_per_room=rescale(sdf$bedrooms_per_room,to=c(1,15))
sdf$population_per_household=rescale(sdf$population_per_household,to=c(1,15))
sdf$log_total_rooms=log(sdf$total_rooms)
sdf$log_total_bedrooms=log(sdf$total_bedrooms)
sdf$log_population=log(sdf$population)
sdf$log_households=log(sdf$households)
sdf$log_median_income=log(sdf$median_income)
sdf$log_median_house_value=
sdf$log_rooms_per_household <- log(sdf$rooms_per_household)
sdf$log_bedrooms_per_room= log(sdf$bedrooms_per_room)
sdf$log_population_per_household=log(sdf$population_per_household)
sdf2=sdf
sdf2$median_house_value=NULL
sdf$log_median_house_value=NULL
summary(sdf)
sdf=df #clean_data_frame
summary(sdf)
library(scales)
#QUITAMOS LOS NAN's
sdf$ocean_proximity = as.factor(sdf$ocean_proximity)
sdf<- one_hot(as.data.table(sdf))
#colnames(sdf)[10]  <- "ocean_proximity_1H_OCEAN"
#colnames(sdf)[13]  <- "ocean_proximity_NEAR_BAY"
#colnames(sdf)[14]  <- "ocean_proximity_NEAR_OCEAN"
sdf <- na.omit(sdf)
#QUITAMOS 'ISLANDS'
sdf<-sdf[,-12]
#QUITMOS LONGITUD Y LATITUD
sdf <- sdf[,-1:-2]
#REMOVEMOS ALGUNOS OUTLAYERS
sdf<-sdf[sdf$median_house_value <500000, ]
sdf<-sdf[sdf$median_income <15, ]
sdf<-sdf[sdf$housing_median_age <49, ]
sdf$rooms_per_household <- sdf$total_rooms/ sdf$households
sdf$bedrooms_per_room= sdf$total_bedrooms/ sdf$total_rooms
sdf$population_per_household=sdf$population/ sdf$households
sdf$median_house_value=rescale(sdf$median_house_value,to=c(1,15))
sdf$housing_median_age=rescale(sdf$housing_median_age,to=c(1,15))
sdf$total_rooms=rescale(sdf$total_rooms,to=c(1,15))
sdf$total_bedrooms=rescale(sdf$total_bedrooms,to=c(1,15))
sdf$population=rescale(sdf$population,to=c(1,15))
sdf$households=rescale(sdf$households,to=c(1,15))
sdf$rooms_per_household=rescale(sdf$rooms_per_household,to=c(1,15))
sdf$bedrooms_per_room=rescale(sdf$bedrooms_per_room,to=c(1,15))
sdf$population_per_household=rescale(sdf$population_per_household,to=c(1,15))
sdf$log_total_rooms=log(sdf$total_rooms)
sdf$log_total_bedrooms=log(sdf$total_bedrooms)
sdf$log_population=log(sdf$population)
sdf$log_households=log(sdf$households)
sdf$log_median_income=log(sdf$median_income)
sdf$log_median_house_value=
sdf$log_rooms_per_household <- log(sdf$rooms_per_household)
sdf$log_bedrooms_per_room= log(sdf$bedrooms_per_room)
sdf$log_population_per_household=log(sdf$population_per_household)
sdf2=sdf
sdf2$median_house_value=NULL
sdf$log_median_house_value=NULL
summary(sdf)
sdf=df #clean_data_frame
summary(sdf)
sdf$ocean_proximity = as.factor(sdf$ocean_proximity)
sdf<- one_hot(as.data.table(sdf))
summary(sdf)
sdf=df #clean_data_frame
summary(sdf)
sdf$ocean_proximity = as.factor(sdf$ocean_proximity)
sdf<- one_hot(as.data.table(sdf))
summary(sdf)
str(df)
df$ocean_proximity = as.factor(df$ocean_proximity)
df<- one_hot(as.data.table(df))
str(df)
#LEEMOS EL DATASET
df <- read.csv('housing.csv')
df$ocean_proximity = as.factor(df$ocean_proximity)
df<- one_hot(as.data.table(df))
str(df)
df$ocean_proximity = as.factor(df$ocean_proximity)
df<- one_hot(as.data.table(df))
#LEEMOS EL DATASET
df <- read.csv('housing.csv')
df$ocean_proximity = as.factor(df$ocean_proximity)
df<- one_hot(as.data.table(df))
colnames(df)[10]  <- "ocean_proximity_1H_OCEAN"
colnames(df)[13]  <- "ocean_proximity_NEAR_BAY"
colnames(df)[14]  <- "ocean_proximity_NEAR_OCEAN"
df <- na.omit(df)
str(df)
cdf=df #clean_data_frame
#cdf_lon_lat=df #clean_data_frame
#QUITAMOS LOS NAN's
cdf <- na.omit(cdf)
#QUITAMOS 'ISLANDS'
cdf<-cdf[,-12]
#QUITMOS LONGITUD Y LATITUD
#cdf <- cdf[,-1:-2]
#REMOVEMOS ALGUNOS OUTLAYERS
cdf<-cdf[cdf$median_house_value <500000, ]
cdf<-cdf[cdf$median_income <15, ]
cdf<-cdf[cdf$housing_median_age <49, ]
# QUITAMOS LOS OUTLAYERS
#cdf<- cdf[-which(cdf$total_rooms%in% out_total_rooms),]
#cdf<- cdf[-which(cdf$total_bedrooms%in% out_total_bedrooms),]
#cdf<- cdf[-which(cdf$population%in% out_population),]
#cdf<- cdf[-which(cdf$households%in% out_households),]
#cdf<- cdf[-which(cdf$median_income%in% out_median_income),]
#cdf<- cdf[-which(cdf$median_house_value%in% out_median_value),]
str(cdf)
cdf$rooms_per_household <- cdf$total_rooms/ cdf$households
cdf$bedrooms_per_room= cdf$total_bedrooms/ cdf$total_rooms
cdf$population_per_household=cdf$population/ cdf$households
cdf$log_total_rooms=log(cdf$total_rooms)
cdf$log_total_bedrooms=log(cdf$total_bedrooms)
cdf$log_population=log(cdf$population)
cdf$log_households=log(cdf$households)
cdf$log_median_income=log(cdf$median_income)
cdf$log_median_house_value=log(cdf$median_house_value)
cdf$log_rooms_per_household <- cdf$log_total_rooms/ cdf$log_households
cdf$log_bedrooms_per_room= cdf$log_total_bedrooms/ cdf$log_total_rooms
cdf$log_population_per_household=cdf$log_population/ cdf$log_households
cdf2=cdf
cdf2$median_house_value=NULL
cdf$log_median_house_value=NULL
str(cdf)
sdf=df #clean_data_frame
summary(sdf)
sdf$ocean_proximity = as.factor(sdf$ocean_proximity)
sdf<- one_hot(as.data.table(sdf))
sdf=df #clean_data_frame
summary(sdf)
#QUITAMOS 'ISLANDS'
sdf<-sdf[,-12]
summary(sdf)
sdf=df #clean_data_frame
summary(sdf)
library(scales)
#QUITAMOS LOS NAN's
#QUITAMOS 'ISLANDS'
sdf<-sdf[,-12]
#QUITMOS LONGITUD Y LATITUD
sdf <- sdf[,-1:-2]
#REMOVEMOS ALGUNOS OUTLAYERS
sdf<-sdf[sdf$median_house_value <500000, ]
sdf<-sdf[sdf$median_income <15, ]
sdf<-sdf[sdf$housing_median_age <49, ]
sdf$rooms_per_household <- sdf$total_rooms/ sdf$households
sdf$bedrooms_per_room= sdf$total_bedrooms/ sdf$total_rooms
sdf$population_per_household=sdf$population/ sdf$households
sdf$median_house_value=rescale(sdf$median_house_value,to=c(1,15))
sdf$housing_median_age=rescale(sdf$housing_median_age,to=c(1,15))
sdf$total_rooms=rescale(sdf$total_rooms,to=c(1,15))
sdf$total_bedrooms=rescale(sdf$total_bedrooms,to=c(1,15))
sdf$population=rescale(sdf$population,to=c(1,15))
sdf$households=rescale(sdf$households,to=c(1,15))
sdf$rooms_per_household=rescale(sdf$rooms_per_household,to=c(1,15))
sdf$bedrooms_per_room=rescale(sdf$bedrooms_per_room,to=c(1,15))
sdf$population_per_household=rescale(sdf$population_per_household,to=c(1,15))
sdf$log_total_rooms=log(sdf$total_rooms)
sdf$log_total_bedrooms=log(sdf$total_bedrooms)
sdf$log_population=log(sdf$population)
sdf$log_households=log(sdf$households)
sdf$log_median_income=log(sdf$median_income)
sdf$log_median_house_value=
sdf$log_rooms_per_household <- log(sdf$rooms_per_household)
sdf$log_bedrooms_per_room= log(sdf$bedrooms_per_room)
sdf$log_population_per_household=log(sdf$population_per_household)
sdf2=sdf
sdf2$median_house_value=NULL
sdf$log_median_house_value=NULL
summary(sdf)
library(sp)
library(maps)
library(maptools)
str(cdf)
latlong_df <- cdf[,c(1,2)]
str(latlong_df)
counties <- maps::map('county', fill=TRUE, col="transparent", plot=FALSE)
IDs <- sapply(strsplit(counties$names, ":"), function(x) x[1])
counties_sp <- map2SpatialPolygons(counties, IDs=IDs,
proj4string=CRS("+proj=longlat +datum=WGS84"))
# Convert pointsDF to a SpatialPoints object
pointsSP <- SpatialPoints(latlong_df,
proj4string=CRS("+proj=longlat +datum=WGS84"))
# Use 'over' to get _indices_ of the Polygons object containing each point
indices <- over(pointsSP, counties_sp)
# Return the county names of the Polygons object containing each point
countyNames <- sapply(counties_sp@polygons, function(x) x@ID)
my_data= countyNames[indices]
my_data=sub("california,", "", my_data)
mdf=df
mdf$county_name=toTitleCase(my_data)
mdf=cdf
mdf$county_name=toTitleCase(my_data)
mdf$county_name=toTitleCase(my_data)
str(mdf)
mdf$county_name=as.factor(mdf$county_name)
str(mdf)
mdf <- na.omit(mdf)
str(mdf)
m6<- lm(mdf$median_house_value ~ . , mdf)
m7<- lm(mdf$median_house_value ~ . , mdf)
m6_adjr2 = summary(m6)$adj.r.squared
m7_adjr2 = summary(m7)$adj.r.squared
beginning_mods_results = data.frame(
"Total Predictors" =
c("m6" = extractAIC(m6)[1],
"m7" = extractAIC(m7)[1],
),
"AIC" =
c("m6" = extractAIC(m6)[2],
"m7" = extractAIC(m7)[2],
),
"Adj R-Squared" =
c("m6" = m6_adjr2,
"m7" = m7_adjr2,
)
)
m6_adjr2 = summary(m6)$adj.r.squared
m7_adjr2 = summary(m7)$adj.r.squared
beginning_mods_results = data.frame(
"Total Predictors" =
c("m6" = extractAIC(m6)[1],
"m7" = extractAIC(m7)[1]
),
"AIC" =
c("m6" = extractAIC(m6)[2],
"m7" = extractAIC(m7)[2]
),
"Adj R-Squared" =
c("m6" = m6_adjr2,
"m7" = m7_adjr2
)
)
kable(beginning_mods_results, align = c("c", "r"))
summary(m6)
summary(m7)
autoplot(m6)
autoplot(m7)
str(cdf)
corr(cdf)
cor(cdf)
x.train <- sample_frac(tbl = cdf, replace = FALSE, size = 0.80)
x.test <- anti_join(df, x.train)
summary(model)
model <- lm(x.train$median_house_value ~ x.train$latitude + x.train$median_income + x.train$ocean_proximity_1H_OCEAN + x.train$ocean_proximity_INLAND + x.train$bedrooms_per_room + x.train$log_population_per_household ,x.train)
summary(model)
test_actual = x.test$median_house_value
# the predicted house values for the test set
test_predictions = predict(m1, x.test)
# the RMSE
test_rmse = sqrt(mean((test_actual - test_predictions)^2))
# the percentage error
test_rmse
model <- lm(x.train$median_house_value ~ x.train$latitude + x.train$median_income + x.train$ocean_proximity_1H_OCEAN + x.train$ocean_proximity_INLAND + x.train$bedrooms_per_room + x.train$log_population_per_household ,x.train, x.train$log_median_income)
test_actual = x.test$median_house_value
# the predicted house values for the test set
test_predictions = predict(m1, x.test)
# the RMSE
test_rmse = sqrt(mean((test_actual - test_predictions)^2))
# the percentage error
test_rmse
x.train <- sample_frac(tbl = cdf, replace = FALSE, size = 0.80)
x.test <- anti_join(cdf, x.train)
model <- lm(x.train$median_house_value ~ x.train$latitude + x.train$median_income + x.train$ocean_proximity_1H_OCEAN + x.train$ocean_proximity_INLAND + x.train$bedrooms_per_room + x.train$log_population_per_household ,x.train, x.train$log_median_income)
summary(model)
x.train <- sample_frac(tbl = cdf, replace = FALSE, size = 0.80)
x.test <- anti_join(cdf, x.train)
summary(x.train)
model <- lm(x.train$median_house_value ~ x.train$latitude + x.train$median_income + x.train$ocean_proximity_1H_OCEAN + x.train$ocean_proximity_INLAND + x.train$bedrooms_per_room + x.train$log_population_per_household ,x.train, x.train$log_median_income)
summary(model)
x.train <- sample_frac(tbl = df, replace = FALSE, size = 0.80)
x.test <- anti_join(df, x.train)
summary(x.train)
model <- lm(x.train$median_house_value ~ x.train$latitude + x.train$median_income + x.train$ocean_proximity_1H_OCEAN + x.train$ocean_proximity_INLAND + x.train$bedrooms_per_room + x.train$log_population_per_household+ x.train$log_median_income ,x.train)
x.train <- sample_frac(tbl = cdf, replace = FALSE, size = 0.80)
x.test <- anti_join(cdf, x.train)
summary(x.train)
model <- lm(x.train$median_house_value ~ x.train$latitude + x.train$median_income + x.train$ocean_proximity_1H_OCEAN + x.train$ocean_proximity_INLAND + x.train$bedrooms_per_room + x.train$log_population_per_household+ x.train$log_median_income ,x.train)
summary(model)
test_actual = x.test$median_house_value
# the predicted house values for the test set
test_predictions = predict(m1, x.test)
test_actual = x.test$median_house_value
# the predicted house values for the test set
test_predictions = predict(model, x.test)
# the RMSE
test_rmse = sqrt(mean((test_actual - test_predictions)^2))
# the percentage error
test_rmse
# the RMSE
test_rmse = sqrt(mean((test_actual - test_predictions)^2))
# the percentage error
test_rmse
x.train <- sample_frac(tbl = cdf, replace = FALSE, size = 0.80)
x.test <- anti_join(cdf, x.train)
summary(x.train)
model <- lm(x.train$median_house_value ~ x.train$latitude + x.train$median_income + x.train$ocean_proximity_1H_OCEAN + x.train$ocean_proximity_INLAND + x.train$bedrooms_per_room + x.train$log_population_per_household ,x.train)
summary(model)
test_actual = x.test$median_house_value
# the predicted house values for the test set
test_predictions = predict(model, x.test)
test_actual = x.test$median_house_value
# the predicted house values for the test set
test_predictions = predict(model, x.train)
# the RMSE
test_rmse = sqrt(mean((test_actual - test_predictions)^2))
# the percentage error
test_rmse
test_actual = x.test$median_house_value
# the predicted house values for the test set
test_predictions = predict(model, x.test)
# the RMSE
test_rmse = sqrt(mean((test_actual - test_predictions)^2))
# the percentage error
test_rmse
x.train <- sample_frac(tbl = df, replace = FALSE, size = 0.80)
x.test <- anti_join(df, x.train)
model <- lm(x.train$median_house_value ~ x.train$latitude + x.train$median_income + x.train$ocean_proximity_1H_OCEAN + x.train$ocean_proximity_INLAND + x.train$bedrooms_per_room + x.train$log_population_per_household ,x.train, x.train$log_median_income)
model <- lm(x.train$median_house_value ~ .,x.train)
summary(model)
test_actual = x.test$median_house_value
# the predicted house values for the test set
test_predictions = predict(m1, x.test)
# the RMSE
test_rmse = sqrt(mean((test_actual - test_predictions)^2))
# the percentage error
test_rmse
